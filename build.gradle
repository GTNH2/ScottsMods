buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
		classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.3.50"
    }
}

apply plugin: 'forge'
apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'kotlin'

idea.module.downloadJavadoc = true
idea.module.downloadSources = true
sourceCompatibility = 1.8
targetCompatibility = 1.8

compileJava.options.encoding = 'UTF-8'

ext.configFile = file "build.properties"
configFile.withReader {
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

def mod_version = config.major + "." + config.series + "." + config.revision

group = "com.scottkillen.mod"
archivesBaseName = "ScottsModsFull-" + mod_version

minecraft {
    version = "1.7.10-10.13.4.1614-1.7.10"
    runDir = "run"

    replace '${mod_version}', mod_version
}

repositories {
    mavenLocal()
    // maven { url = 'http://maven.scottkillen.com/' }
    // maven { url = 'http://coloredlightscore.us.to/maven/chisel-2-dev/' }
    maven { url = 'http://maven.ic2.player.to/' }
    maven {
        name = "gt"
        url = "https://gregtech.overminddl1.com/"
    }
}

dependencies {
    compile "team.chisel:Chisel:2.9.5.12:deobf"
    compile "team.chisel.ctmlib:CTMLib:MC1.7.10-1.4.1.5:deobf"
    compile "net.sengir.forestry:forestry_1.7.10:${config.forestry}:dev"
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "kore", config.kore
    inputs.property "chisel", config.chisel
    inputs.property "forestry", config.forestry

    // replace stuff in the files we want.
    from(sourceSets.main.resources.srcDirs) {
        include '**/*.info'
        include '**/version.properties'

        expand 'mod_version': config.mod_version, 'minecraft_version': "1.7.10",
                'forge_version': "1.7.10-10.13.4.1614-1.7.10", 'kore_version': config.kore,
                'chisel_version': config.chisel, 'sd_version': config.storagedrawers
    }

    // copy everything else, that we didn't do before
    from(sourceSets.main.resources.srcDirs) {
        exclude '**/*.info'
        exclude '**/version.properties'
    }
}

jar {
    includeEmptyDirs = false
}

task sourcesJar(type: Jar, dependsOn: classes) {
    from(sourceSets.main.output) {
        include '**/*.info'
        include '**/version.properties'

        expand 'mod_version': project.version, 'minecraft_version': project.minecraft.version,
                'forge_version': config.forge, 'kore_version': config.kore,
                'chisel_version': config.chisel, 'sd_version': config.storagedrawers
    }

    from(sourceSets.main.allSource) {
        include '**/TheMod.java'

        expand 'mod_version': project.version
    }

    from(sourceSets.main.allSource) {
        exclude '**/*.info'
        exclude '**/version.properties'
        exclude '**/TheMod.java'
    }

    classifier = 'sources'
}

task deobfJar(type: Jar) {
    from(sourceSets.main.output) {
        include '**/*.info'
        include '**/version.properties'

        expand 'mod_version': project.version, 'minecraft_version': project.minecraft.version,
                'forge_version': config.forge, 'kore_version': config.kore,
                'chisel_version': config.chisel, 'sd_version': config.storagedrawers
    }

    from(sourceSets.main.output) {
        exclude '**/*.info'
        exclude '**/version.properties'
    }

    classifier = 'deobf'
}

artifacts {
    archives sourcesJar
    archives deobfJar
}